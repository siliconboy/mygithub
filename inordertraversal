/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {

    public ArrayList<Integer> inorderTraversal(TreeNode a) {
        ArrayList<Integer> res =new ArrayList<>();
        Stack<Element>  stk = new Stack<>();

       stk.push(new Element(0, a));

       while(!stk.isEmpty()){
         Element item = stk.pop();
         if(item.node == null){
             continue;
         } 
         if(item.type==1){
                 res.add(item.node.val);
         } else {
               stk.push(new Element(0,item.node.right));
               stk.push(new Element(1,item.node));
               stk.push(new Element(0,item.node.left));
           }
       }
        return res;
    }
    
    public class Element {
        int type;  // 0--visit, 1--print
        TreeNode node;
        
        Element(int type, TreeNode node){
            this.type = type;
            this.node = node;
        }
    }
    
}
