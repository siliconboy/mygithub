/*


Given an array A of integers, find the index of values that satisfy A + B = C + D, where A,B,C & D are integers values in the array

Note:

1) Return the indices `A1 B1 C1 D1`, so that 
  A[A1] + A[B1] = A[C1] + A[D1]
  A1 < B1, C1 < D1
  A1 < C1, B1 != D1, B1 != C1 

2) If there are more than one solutions, 
   then return the tuple of values which are lexicographical smallest. 

Assume we have two solutions
S1 : A1 B1 C1 D1 ( these are values of indices int the array )  
S2 : A2 B2 C2 D2

S1 is lexicographically smaller than S2 iff
  A1 < A2 OR
  A1 = A2 AND B1 < B2 OR
  A1 = A2 AND B1 = B2 AND C1 < C2 OR 
  A1 = A2 AND B1 = B2 AND C1 = C2 AND D1 < D2

Example:

Input: [3, 4, 7, 1, 2, 9, 8]
Output: [0, 2, 3, 5] (O index)

If no solution is possible, return an empty list.
*/

public class Solution {
    public ArrayList<Integer> equal(ArrayList<Integer> a) {
        ArrayList<Integer> res = new ArrayList<>();
        HashMap<Integer, Pair> map = new HashMap<>();
        
        for(int i=0;i<a.size();i++){
            for(int j=i+1; j<a.size();j++){
                int sum = a.get(i)+a.get(j);
                if(map.containsKey(sum)){
                    Pair tmp = map.get(sum);
                    if(isValid(tmp.start, tmp.end, i, j)){
                        
                        if(res.isEmpty()){
                            res.add(tmp.start);
                            res.add(tmp.end);
                            res.add(i);
                            res.add(j);
                            
                        }else{
                            update(res, tmp.start, tmp.end, i, j);
                        }
                            
                        map.remove(sum);
                    }
                    
                }else{
                    map.put(sum, new Pair(i,j));
                }
            }
            
        }
        return res;
        
    }
    public static boolean isValid(int i, int j, int x, int y){
        if(i<x && j!=y && j!=x) return true;
        return false;
    }
    public static void update(ArrayList<Integer> res,int i, int j, int x, int y){
        
        if(res.get(0)<i){
            return;
        }else if(res.get(0)>i){
            res.set(0,i);
            res.set(1,j);
            res.set(2,x);
            res.set(3,y);
        }else{
            if(res.get(1)<j){
                return;
            }else{
                if(res.get(1)>j){
                    res.set(0,i);
            res.set(1,j);
            res.set(2,x);
            res.set(3,y);
                }else{
                    if(res.get(2)<x){
                        return;
                    }else{
                        if(res.get(2)>x){
                            res.set(0,i);
            res.set(1,j);
            res.set(2,x);
            res.set(3,y);
                        }else{
                            if(res.get(3)<y){
                                return;
                            }else{
                                if(res.get(3)>y){
                                    res.set(0,i);
            res.set(1,j);
            res.set(2,x);
            res.set(3,y);
                                }
                            }
                        }
                    }
                    
                }
                
            }
        }
    
        
    }
    
    class Pair {
        public int start;
        public int end;
        Pair(int s, int e){
            start =s;
            end =e;
        }
    }
}
